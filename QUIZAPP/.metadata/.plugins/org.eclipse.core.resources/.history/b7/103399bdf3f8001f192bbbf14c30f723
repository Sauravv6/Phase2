package com.quiz.service;

import com.quiz.bean.Quiz;
import com.quiz.bean.Question;
import com.quiz.dao.QuizDAO;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class QuizServiceImpl implements QuizService {

    private final QuizDAO quizDAO;
    private final QuestionClient questionClient;
    private final CircuitBreakerFactory circuitBreakerFactory;

    public QuizServiceImpl(QuizDAO quizRepository, QuestionClient questionClient, CircuitBreakerFactory circuitBreakerFactory) {
        this.quizDAO = quizRepository;
        this.questionClient = questionClient;
        this.circuitBreakerFactory = circuitBreakerFactory;
    }

    @Override
    public Quiz add(Quiz quiz) {
        return quizDAO.save(quiz);
    }

    @Override
    public List<Quiz> get() {
        return quizDAO.findAll().stream()
                .map(quiz -> {
                    quiz.setQuestions(getQuestionsWithCircuitBreaker(quiz.getId()));
                    return quiz;
                }).collect(Collectors.toList());
    }

    @Override
    public Quiz get(Long id) {
        Quiz quiz = quizDAO.findById(id)
                .orElseThrow(() -> new RuntimeException("Quiz not found"));

        // âœ… Circuit breaker se aaye questions assign karo
        List<Question> fetchedQuestions = getQuestionsWithCircuitBreaker(quiz.getId());
        quiz.setQuestions(fetchedQuestions);

        System.out.println("ðŸ”¹ Final Quiz Object: " + quiz); // Debugging output

        return quiz;
    }

    /**
     * âœ… Circuit Breaker Protected Method
     */
    public List<Question> getQuestionsWithCircuitBreaker(Long quizId) {
        return circuitBreakerFactory.create("questionService").run(
                () -> questionClient.getQuestionOfQuiz(quizId),
                throwable -> fallbackForGetQuestions(quizId, throwable)
        );
    }
    
    /**
     * âœ… Fallback Method when Circuit Breaker is Open
     */
//    public List<Question> fallbackForGetQuestions(Long quizId, Throwable t) {
//        System.out.println("ðŸ”¥ Circuit Breaker Triggered! Returning default question.");
//        
//        // âœ… Default Question Object
//        Question defaultQuestion = new Question();
//        defaultQuestion.setQuestionId(0L);  // Default ID
//        defaultQuestion.setQuestion("No Question"); // Default message
//        defaultQuestion.setQuizId(quizId); // âœ… Ensure quizId is set
//
//        List<Question> fallbackQuestions = Collections.singletonList(defaultQuestion);
//        
//        System.out.println("ðŸ”¹ Fallback Questions: " + fallbackQuestions); // Debugging output
//        
//        return fallbackQuestions;
//    }
    
    public List<Question> fallbackForGetQuestions(Long quizId, Throwable t) {
        System.out.println("ðŸ”¥ Circuit Breaker Triggered! Returning default question.");
        System.out.println("ðŸ›‘ Error Cause: " + t.getMessage());

        // âœ… Default Question Object
        Question defaultQuestion = new Question();
        defaultQuestion.setQuestionId(0L);
        defaultQuestion.setQuestion("No Question");
        defaultQuestion.setQuizId(quizId);

        List<Question> fallbackQuestions = Collections.singletonList(defaultQuestion);

        System.out.println("ðŸ”¹ Fallback Questions: " + fallbackQuestions); // Debugging output

        return fallbackQuestions;
    }

}
