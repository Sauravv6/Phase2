//package com.quiz.service;
//
//
//import org.springframework.stereotype.Service;
//
//import com.quiz.bean.Quiz;
//import com.quiz.dao.QuizDAO;
//
//import java.util.List;
//import java.util.stream.Collectors;
//
//@Service
//public class QuizServiceImpl implements QuizService {
//
//    private QuizDAO quizDAO;
//
//    private QuestionClient questionClient;
//
//    public QuizServiceImpl(QuizDAO quizRepository, QuestionClient questionClient) {
//        this.quizDAO = quizRepository;
//        this.questionClient = questionClient;
//    }
//
//    @Override
//    public Quiz add(Quiz quiz) {
//        return quizDAO.save(quiz);
//    }
//
//    @Override
//    public List<Quiz> get() {
//        List<Quiz> quizzes = quizDAO.findAll();
//
//        List<Quiz> newQuizList = quizzes.stream().map(quiz -> {
//            quiz.setQuestions(questionClient.getQuestionOfQuiz(quiz.getId()));
//            return quiz;
//        }).collect(Collectors.toList());
//
//        return newQuizList;
//    }
//
//    @Override
//    public Quiz get(Long id) {
//
//        Quiz quiz = quizDAO.findById(id).orElseThrow(() -> new RuntimeException("Quiz not found"));
//        quiz.setQuestions(questionClient.getQuestionOfQuiz(quiz.getId()));
//        return quiz;
//    }
//}

package com.quiz.service;

import com.quiz.bean.Quiz;
import com.quiz.bean.Question;
import com.quiz.service.QuestionClient;
import com.quiz.dao.QuizDAO;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class QuizServiceImpl implements QuizService {

    private final QuizDAO quizDAO;
    private final QuestionClient questionClient;

    public QuizServiceImpl(QuizDAO quizRepository, QuestionClient questionClient) {
        this.quizDAO = quizRepository;
        this.questionClient = questionClient;
    }

    @Override
    public Quiz add(Quiz quiz) {
        return quizDAO.save(quiz);
    }

    @Override
    public List<Quiz> get() {
        List<Quiz> quizzes = quizDAO.findAll();

        return quizzes.stream().map(quiz -> {
            quiz.setQuestions(getQuestionsWithCircuitBreaker(quiz.getId()));
            return quiz;
        }).collect(Collectors.toList());
    }

    @Override
    public Quiz get(Long id) {
        Quiz quiz = quizDAO.findById(id).orElseThrow(() -> new RuntimeException("Quiz not found"));
        quiz.setQuestions(getQuestionsWithCircuitBreaker(quiz.getId()));
        return quiz;
    }

    /**
     * Circuit Breaker Protected Method to Fetch Questions
     */
    @CircuitBreaker(name = "questionService", fallbackMethod = "fallbackForGetQuestions")
    public List<Question> getQuestionsWithCircuitBreaker(Long quizId) {
        return questionClient.getQuestionOfQuiz(quizId);
    }

    /**
     * Fallback Method when Circuit Breaker is Open
     */
    public List<Question> fallbackForGetQuestions(Long quizId, Throwable t) {
        System.out.println("ðŸ”¥ Circuit Breaker Triggered! Returning empty question list.");
        return Collections.emptyList();
    }
}
